name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.1.4
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Debug environment
        run: |
          echo "Node version: $(node -v)"
          echo "NPM version: $(npm -v)"
          echo "PNPM version: $(pnpm -v)"
          echo "Directory contents:"
          ls -la
          echo "Package.json contents:"
          cat package.json

      - name: Clean install
        run: |
          rm -rf node_modules pnpm-lock.yaml
          pnpm install --no-frozen-lockfile --verbose
          if [ $? -ne 0 ]; then
            echo "Install failed. Showing full debug output:"
            PNPM_DEBUG=true pnpm install --no-frozen-lockfile
            exit 1
          fi

      - name: Build
        run: |
          pnpm run build
          if [ $? -ne 0 ]; then
            echo "Build failed. Showing TypeScript version and config:"
            npx tsc --version
            cat tsconfig.json
            exit 1
          fi

      - name: Pack
        run: pnpm pack

      - name: Get package version
        id: get_version
        run: echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: ./n8n-nodes-twenty-${{ env.VERSION }}.tgz
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./n8n-nodes-twenty-${{ env.VERSION }}.tgz
          asset_name: n8n-nodes-twenty.tgz
          asset_content_type: application/gzip
